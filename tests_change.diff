diff --git a/sph.xcodeproj/project.pbxproj b/sph.xcodeproj/project.pbxproj
index 1c919af..832b988 100644
--- a/sph.xcodeproj/project.pbxproj
+++ b/sph.xcodeproj/project.pbxproj
@@ -23,6 +23,7 @@
 		321DC16721BA6800009F6C18 /* CacheManager.swift in Sources */ = {isa = PBXBuildFile; fileRef = 321DC16621BA6800009F6C18 /* CacheManager.swift */; };
 		321DC16C21BA7945009F6C18 /* UsageDetailsTableController.swift in Sources */ = {isa = PBXBuildFile; fileRef = 321DC16B21BA7945009F6C18 /* UsageDetailsTableController.swift */; };
 		321DC16E21BA7997009F6C18 /* UsageDetailsTableCell.swift in Sources */ = {isa = PBXBuildFile; fileRef = 321DC16D21BA7997009F6C18 /* UsageDetailsTableCell.swift */; };
+		677414B221C5331500F92CA3 /* cacheTests.swift in Sources */ = {isa = PBXBuildFile; fileRef = 677414B121C5331500F92CA3 /* cacheTests.swift */; };
 /* End PBXBuildFile section */
 
 /* Begin PBXContainerItemProxy section */
@@ -57,6 +58,7 @@
 		321DC16D21BA7997009F6C18 /* UsageDetailsTableCell.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = UsageDetailsTableCell.swift; sourceTree = "<group>"; };
 		3FE73B79AAA930F14988E4DC /* Pods-sphTests.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-sphTests.release.xcconfig"; path = "Pods/Target Support Files/Pods-sphTests/Pods-sphTests.release.xcconfig"; sourceTree = "<group>"; };
 		6137EA44C81661B09D687C08 /* Pods_sphTests.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_sphTests.framework; sourceTree = BUILT_PRODUCTS_DIR; };
+		677414B121C5331500F92CA3 /* cacheTests.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = cacheTests.swift; sourceTree = "<group>"; };
 		6FABBF0888C180B655501590 /* Pods-sph.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-sph.release.xcconfig"; path = "Pods/Target Support Files/Pods-sph/Pods-sph.release.xcconfig"; sourceTree = "<group>"; };
 		D74EAA8730BE1A9A8E002396 /* Pods-sph.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-sph.debug.xcconfig"; path = "Pods/Target Support Files/Pods-sph/Pods-sph.debug.xcconfig"; sourceTree = "<group>"; };
 		F247F7BFBDAF79C939064D74 /* Pods_sph.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_sph.framework; sourceTree = BUILT_PRODUCTS_DIR; };
@@ -136,6 +138,7 @@
 			children = (
 				321DC14821BA511A009F6C18 /* sphTests.swift */,
 				321DC14A21BA511A009F6C18 /* Info.plist */,
+				677414B121C5331500F92CA3 /* cacheTests.swift */,
 			);
 			path = sphTests;
 			sourceTree = "<group>";
@@ -388,6 +391,7 @@
 			isa = PBXSourcesBuildPhase;
 			buildActionMask = 2147483647;
 			files = (
+				677414B221C5331500F92CA3 /* cacheTests.swift in Sources */,
 				321DC14921BA511A009F6C18 /* sphTests.swift in Sources */,
 			);
 			runOnlyForDeploymentPostprocessing = 0;
diff --git a/sph/AppDelegate.swift b/sph/AppDelegate.swift
index 773f2d3..a09e27c 100644
--- a/sph/AppDelegate.swift
+++ b/sph/AppDelegate.swift
@@ -19,21 +19,5 @@ class AppDelegate: UIResponder, UIApplicationDelegate {
         return true
     }
 
-    func applicationWillResignActive(_ application: UIApplication) {
-    }
-
-    func applicationDidEnterBackground(_ application: UIApplication) {
-    }
-
-    func applicationWillEnterForeground(_ application: UIApplication) {
-    }
-
-    func applicationDidBecomeActive(_ application: UIApplication) {
-    }
-
-    func applicationWillTerminate(_ application: UIApplication) {
-    }
-
-
 }
 
diff --git a/sph/Constants.swift b/sph/Constants.swift
index bad7412..327a2f0 100644
--- a/sph/Constants.swift
+++ b/sph/Constants.swift
@@ -11,29 +11,11 @@ import Foundation
 class Constants {
     
     static let sharedInstance = Constants()
-    
-    //Values
-    func resourceId() -> String {
-        return "a807b7ab-6cad-4aa6-87d0-e283a7353a0f"
-    }
-    
-    // Messages
-    func noInternetFromCache() -> String {
-        return "No Internet connection available. Displaying the offline data available"
-    }
-    
-    func noInternetNoCache() -> String {
-        return "No Internet connection available. No offline data available to display"
-    }
-    
-    func error() -> String {
-        return "Please try after sometime"
-    }
-    
-    //Keys
-    func realmEncryptionKey() -> String {
-        return "TveURqLYbegZHbHi4KOP3l5Xgo7vZ76yWUaA0DoHV2UJhqt3dUIpb7M206Pc5s69"
-    }
+    static let resourceId : String = "a807b7ab-6cad-4aa6-87d0-e283a7353a0f"
+    static let noInternetFromCache : String = "No Internet connection available. Displaying the offline data available"
+    static let noInternetNoCache : String = "No Internet connection available. No offline data available to display"
+    static let error : String = "Please try after sometime"
+    static let realmEncryptionKey : String = "TveURqLYbegZHbHi4KOP3l5Xgo7vZ76yWUaA0DoHV2UJhqt3dUIpb7M206Pc5s69"
     
     // APIs
     func dataUsageApi(offset: Int, limit: Int, resourceId: String) -> String {
diff --git a/sph/Managers/CacheManager.swift b/sph/Managers/CacheManager.swift
index df2a230..ca3c769 100644
--- a/sph/Managers/CacheManager.swift
+++ b/sph/Managers/CacheManager.swift
@@ -14,7 +14,7 @@ class CacheManager: NSObject {
     class func setupRealm() {
         if let realm = try? Realm(){
             var config = realm.configuration
-            config.encryptionKey = Constants.sharedInstance.realmEncryptionKey().data(using: String.Encoding.utf8)
+            config.encryptionKey = Constants.realmEncryptionKey.data(using: String.Encoding.utf8)
             config.deleteRealmIfMigrationNeeded = true
             
         }
diff --git a/sph/Services/UsageDetailsService.swift b/sph/Services/UsageDetailsService.swift
index 2c32eb6..0421798 100644
--- a/sph/Services/UsageDetailsService.swift
+++ b/sph/Services/UsageDetailsService.swift
@@ -16,10 +16,10 @@ class UsageDetailsServices : NSObject {
         if !NetworkManager.isConnected() {
             usageDetailsResponse = CacheManager.getUsageDetailsList()
             if usageDetailsResponse.count > 0 {
-                callBack(true, false, Constants.sharedInstance.noInternetFromCache(), usageDetailsResponse)
+                callBack(true, false, Constants.noInternetFromCache, usageDetailsResponse)
                 return
             }
-            callBack(false, false, Constants.sharedInstance.noInternetNoCache(), usageDetailsResponse)
+            callBack(false, false, Constants.noInternetNoCache, usageDetailsResponse)
             return
         }
         var request = URLRequest(url: URL(string: Constants.sharedInstance.dataUsageApi(offset: offset, limit: limit, resourceId: resourceId))!)
@@ -36,12 +36,12 @@ class UsageDetailsServices : NSObject {
                             callBack(false, true, "Success", usageDetailsResponse)
                             return
                         } else {
-                            callBack(false, false, Constants.sharedInstance.error(), usageDetailsResponse)
+                            callBack(false, false, Constants.error, usageDetailsResponse)
                         }
                     }
                 }
             } catch {
-                callBack(false, false, Constants.sharedInstance.error(), usageDetailsResponse)
+                callBack(false, false, Constants.error, usageDetailsResponse)
             }
         }).resume()
     }
diff --git a/sph/ViewControllers/UsageDetailsTableController.swift b/sph/ViewControllers/UsageDetailsTableController.swift
index d9b44da..8c741bb 100644
--- a/sph/ViewControllers/UsageDetailsTableController.swift
+++ b/sph/ViewControllers/UsageDetailsTableController.swift
@@ -22,7 +22,7 @@ class UsageDetailsTableController: UITableViewController {
     }
     
     private func getUsageDetails() {
-        UsageDetailsServices.DownloadUsageDetails(usageDetails: self.usageDetails, offset: self.offset, limit: self.limit, resourceId: Constants.sharedInstance.resourceId()) { (isCache, status, message, usageDetails) in
+        UsageDetailsServices.DownloadUsageDetails(usageDetails: self.usageDetails, offset: self.offset, limit: self.limit, resourceId: Constants.resourceId) { (isCache, status, message, usageDetails) in
             self.usageDetails = usageDetails
             DispatchQueue.main.async {
                 if !status {
diff --git a/sphTests/cacheTests.swift b/sphTests/cacheTests.swift
new file mode 100644
index 0000000..51e8e7b
--- /dev/null
+++ b/sphTests/cacheTests.swift
@@ -0,0 +1,56 @@
+//
+//  cacheTests.swift
+//  sphTests
+//
+//  Created by Nanjundaswamy Sainath on 15/12/18.
+//  Copyright Â© 2018 Karthik Dp. All rights reserved.
+//
+
+import XCTest
+@testable import sph
+
+class cacheTests: XCTestCase {
+    
+    var record : Record? = nil
+    var usageDetail : UsageDetail? = nil
+    
+    override func setUp() {
+        // Put setup code here. This method is called before the invocation of each test method in the class.
+        let json = ["volume_of_mobile_data":"0.000384", "quarter":"2004-Q3", "_id":1] as [String : AnyObject]
+        self.record = Record(json: json)
+        self.usageDetail = UsageDetail(record: self.record!)
+    }
+
+    override func tearDown() {
+        // Put teardown code here. This method is called after the invocation of each test method in the class.
+        CacheManager.clearDataUsageCache()
+    }
+
+    func testCacheManager() {
+        // This is an example of a functional test case.
+        // Use XCTAssert and related functions to verify your tests produce the correct results.
+        self.addUsageDetails()
+        self.getUsageDetails()
+        self.getUsageDetailsByYear(year: 2004)
+    }
+
+    func addUsageDetails() {
+        CacheManager.addUsageDetail(usageDetail: self.usageDetail!)
+    }
+    
+    func getUsageDetails() {
+        let _ = CacheManager.getUsageDetailsList()
+    }
+    
+    func getUsageDetailsByYear(year: Int) {
+        let _ = CacheManager.getUsageDetailsList(year: year)
+    }
+    
+    func testPerformanceExample() {
+        // This is an example of a performance test case.
+        self.measure {
+            // Put the code you want to measure the time of here.
+        }
+    }
+
+}
diff --git a/sphTests/sphTests.swift b/sphTests/sphTests.swift
index e2bf070..b85e67f 100644
--- a/sphTests/sphTests.swift
+++ b/sphTests/sphTests.swift
@@ -23,7 +23,7 @@ class sphTests: XCTestCase {
     func testAPI() {
         let expectation = self.expectation(description: "Download data usage")
         var usageDetails = List<UsageDetail>()
-        UsageDetailsServices.DownloadUsageDetails(usageDetails: usageDetails, offset: 0, limit: 25, resourceId: "a807b7ab-6cad-4aa6-87d0-e283a7353a0f") { (status, message, usageResponse) in
+        UsageDetailsServices.DownloadUsageDetails(usageDetails: usageDetails, offset: 0, limit: 25, resourceId: "a807b7ab-6cad-4aa6-87d0-e283a7353a0f") { (isCache, status, message, usageResponse) in
             usageDetails = usageResponse
             assert(status == true)
             assert(usageDetails.count > 0)
